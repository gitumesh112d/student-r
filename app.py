{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "ba976b67-191d-4758-9aaa-21a6ee83814d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on all addresses (0.0.0.0)\n",
      " * Running on http://127.0.0.1:3000\n",
      " * Running on http://192.168.221.7:3000\n",
      "Press CTRL+C to quit\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:04] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:05] \"GET /static/style.css HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:05] \"GET /static/images/logo.jpg HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:05] \"GET /favicon.ico HTTP/1.1\" 404 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:22] \"GET /delete/15 HTTP/1.1\" 302 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:22] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:22] \"GET /static/images/logo.jpg HTTP/1.1\" 304 -\n",
      "127.0.0.1 - - [21/Nov/2024 12:20:22] \"GET /static/style.css HTTP/1.1\" 304 -\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, render_template, request, redirect, url_for\n",
    "import sqlite3\n",
    "import os\n",
    "\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Add `enumerate` as a global function\n",
    "#app.jinja_env.globals.update(enumerate=enumerate)\n",
    "\n",
    "# Route for the homepage to display all registration\n",
    "@app.route('/')\n",
    "def index():\n",
    "    conn = sqlite3.connect('registration.db')\n",
    "    c = conn.cursor()\n",
    "    c.execute(\"SELECT * FROM registration\")\n",
    "    registration = c.fetchall()\n",
    "    \n",
    "    c.execute(\"select sum(registration_fees) FROM registration\")\n",
    "    sums = c.fetchone()[0]\n",
    "\n",
    "    c.execute(\"select count(*) FROM registration\")\n",
    "    enrolcount = c.fetchone()[0]\n",
    "\n",
    "    c.execute(\"select count(*) FROM registration where class=10\")\n",
    "    class10 = c.fetchone()[0]\n",
    "\n",
    "    c.execute(\"select count(*) FROM registration where class=11\")\n",
    "    class11 = c.fetchone()[0]\n",
    "    \n",
    "    c.execute(\"select count(*) FROM registration where class=12\")\n",
    "    class12 = c.fetchone()[0]\n",
    "\n",
    "    conn.close()\n",
    "   \n",
    "    return render_template(\"index.html\", registration=registration, sums=sums, enrolcount=enrolcount, class10=class10, class11=class11, class12=class12)\n",
    "\n",
    "\n",
    "# Route for the homepage to display all registration\n",
    "@app.route('/feestructure')\n",
    "def fee_structure():\n",
    "   \n",
    "    return render_template(\"fee_structure.html\")\n",
    "\n",
    "\n",
    "# Route for creating a new register\n",
    "@app.route('/new', methods=['GET', 'POST'])\n",
    "def new_register():\n",
    "    if request.method == 'POST':\n",
    "        fname = request.form['fname']\n",
    "        lname = request.form['lname']\n",
    "        subject = request.form['subject']\n",
    "        classs = request.form['class']\n",
    "        title = request.form['title']\n",
    "        Regfee = request.form['Regfee']\n",
    "        comment = request.form['comment']\n",
    "        \n",
    "        conn = sqlite3.connect('registration.db')\n",
    "        c = conn.cursor()\n",
    "        c.execute(\"INSERT INTO registration (F_Name, L_Name, Subject, Class, Title, Registration_fees, comment) VALUES (?, ?, ?, ?, ?, ?, ?)\", (fname, lname, subject, classs, title, Regfee, comment))\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        return redirect(url_for('index'))\n",
    "    return render_template('new_register.html')\n",
    "\n",
    "# Route for editing an existing register\n",
    "@app.route('/edit/<int:register_id>', methods=['GET', 'POST'])\n",
    "def edit_register(register_id):\n",
    "    conn = sqlite3.connect('registration.db')\n",
    "    c = conn.cursor()\n",
    "    c.execute(\"SELECT * FROM registration WHERE id = ?\", (register_id,))\n",
    "    reg = c.fetchone()\n",
    "\n",
    "    conn.close()\n",
    "\n",
    "    if request.method == 'POST':\n",
    "        fname = request.form['fname']\n",
    "        lname = request.form['lname']\n",
    "        subject = request.form['subject']\n",
    "        classs = request.form['class']\n",
    "        title = request.form['title']\n",
    "        regfee = request.form['regfee']\n",
    "        comment = request.form['comment']\n",
    "        conn = sqlite3.connect('registration.db')\n",
    "      \n",
    "        c = conn.cursor()\n",
    "        c.execute(\"UPDATE registration SET F_Name = ?, L_name = ?, Subject = ?, Class=?,Title=?,Registration_fees=?,comment=? WHERE id = ?\", (fname, lname, subject, classs, title, regfee, comment, register_id))\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        return redirect(url_for('index'))\n",
    "    return render_template('edit_register.html', reg=reg)\n",
    "\n",
    "# Route for deleting a register\n",
    "@app.route('/delete/<int:register_id>')\n",
    "def delete_register(register_id):\n",
    "    conn = sqlite3.connect('registration.db')\n",
    "    c = conn.cursor()\n",
    "    c.execute(\"DELETE FROM registration WHERE id = ?\", (register_id,))\n",
    "    conn.commit()\n",
    "    conn.close()\n",
    "    return redirect(url_for('index'))\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "      app.run(debug=False, host='0.0.0.0', port=int(os.environ.get(\"PORT\", 3000)))\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
